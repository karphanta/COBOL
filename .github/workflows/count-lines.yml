name: Contador de L칤neas de C칩digo

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  count-lines:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout c칩digo
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
      
    - name: Contar l칤neas de c칩digo
      run: |
        #!/bin/bash
        
        # Crear directorio para los archivos de conteo si no existe
        mkdir -p line-counts
        
        # Extensiones de archivos de programaci칩n comunes
        extensions=("*.py" "*.js" "*.ts" "*.java" "*.cpp" "*.c" "*.cs" "*.php" "*.rb" "*.go" "*.rs" "*.swift" "*.kt" "*.scala" "*.html" "*.css" "*.jsx" "*.tsx" "*.vue" "*.sh" "*.ps1" "*.sql" "*.r" "*.m" "*.pl" "*.lua" "*.dart" "*.elm" "*.clj" "*.hs" "*.ml" "*.fs" "*.vb" "*.pas" "*.asm" "*.s")
        
        # Funci칩n para contar l칤neas
        count_lines() {
          local file="$1"
          local total_lines=$(wc -l < "$file")
          local code_lines=$(grep -v '^\s*$' "$file" | grep -v '^\s*#' | grep -v '^\s*//' | grep -v '^\s*/\*' | grep -v '^\s*\*' | wc -l)
          local blank_lines=$(grep -c '^\s*$' "$file")
          local comment_lines=$((total_lines - code_lines - blank_lines))
          
          echo "=== ESTAD칈STICAS DE $file ===" 
          echo "L칤neas totales: $total_lines"
          echo "L칤neas de c칩digo: $code_lines"
          echo "L칤neas en blanco: $blank_lines" 
          echo "L칤neas de comentarios (aprox.): $comment_lines"
          echo "Fecha de an치lisis: $(date)"
          echo ""
        }
        
        # Procesar cada extensi칩n
        for ext in "${extensions[@]}"; do
          # Buscar archivos con la extensi칩n actual
          find . -name "$ext" -type f ! -path "./line-counts/*" ! -path "./.git/*" | while read -r file; do
            if [ -f "$file" ]; then
              # Obtener el nombre del archivo sin la ruta
              filename=$(basename "$file")
              # Crear archivo .txt con el mismo nombre
              output_file="line-counts/${filename}.txt"
              
              echo "Procesando: $file"
              count_lines "$file" > "$output_file"
              
              # Tambi칠n mostrar en el log de GitHub Actions
              echo "游늵 Archivo procesado: $file"
              cat "$output_file"
              echo "---"
            fi
          done
        done
        
        # Crear resumen general
        echo "=== RESUMEN GENERAL ===" > line-counts/RESUMEN.txt
        echo "Fecha: $(date)" >> line-counts/RESUMEN.txt
        echo "" >> line-counts/RESUMEN.txt
        
        total_files=0
        total_lines=0
        
        find . -name "*.py" -o -name "*.js" -o -name "*.ts" -o -name "*.java" -o -name "*.cpp" -o -name "*.c" -o -name "*.cs" -o -name "*.php" -o -name "*.rb" -o -name "*.go" -o -name "*.rs" -o -name "*.swift" -o -name "*.kt" -o -name "*.html" -o -name "*.css" | while read -r file; do
          if [ -f "$file" ] && [[ ! "$file" =~ line-counts/ ]] && [[ ! "$file" =~ .git/ ]]; then
            lines=$(wc -l < "$file")
            echo "$file: $lines l칤neas" >> line-counts/RESUMEN.txt
            total_files=$((total_files + 1))
            total_lines=$((total_lines + lines))
          fi
        done
        
        echo "" >> line-counts/RESUMEN.txt
        echo "Total de archivos analizados: $total_files" >> line-counts/RESUMEN.txt
        echo "Total de l칤neas: $total_lines" >> line-counts/RESUMEN.txt
        
    - name: Listar archivos generados
      run: |
        cd cobol-repo
        echo "游늬 Archivos generados:"
        ls -la line-counts/
        echo ""
        echo "游늵 Contenido del resumen:"
        cat line-counts/RESUMEN.txt
        
    - name: Subir archivos de conteo
      uses: actions/upload-artifact@v4
      with:
        name: cobol-line-counts
        path: cobol-repo/line-counts/
        retention-days: 30
        
    # COMENTADO: Commit autom치tico (requiere permisos especiales)
    # - name: Commit y push de los archivos de conteo (opcional)
    #   if: github.event_name == 'push'
    #   run: |
    #     git config --local user.email "action@github.com"
    #     git config --local user.name "GitHub Action"
    #     git add line-counts/
    #     git diff --staged --quiet || git commit -m "游늵 Actualizar conteos de l칤neas [skip ci]"
    #     git push
